{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samuel\\\\Desktop\\\\nlw4\\\\trilha_react\\\\moveit-next\\\\src\\\\contexts\\\\ChallangesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challanges from '../../challanges.json';\nexport var ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challangeCompleted = _useState3[0],\n      setChallangeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallange = _useState4[0],\n      setActiveChallange = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallange() {\n    var ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\n    var challange = challanges[ramdomChallangesIndex];\n    setActiveChallange(challange);\n  }\n\n  function resetChallange() {\n    setActiveChallange(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challangeCompleted: challangeCompleted,\n      activeChallange: activeChallange,\n      levelUp: levelUp,\n      startNewChallange: startNewChallange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallangesProvider, \"K790JhAK5zsfzmD4IzyBEZAbX/Y=\");\n\n_c = ChallangesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallangesProvider\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/nlw4/trilha_react/moveit-next/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challanges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challangeCompleted","setChallangeCompleted","activeChallange","setActiveChallange","levelUp","startNewChallange","ramdomChallangesIndex","Math","floor","random","length","challange","resetChallange"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAqBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC3CJ,QAAQ,CAAC,CAAD,CADmC;AAAA,MAC9DK,KAD8D;AAAA,MACvDC,QADuD;;AAAA,mBAEnBN,QAAQ,CAAC,CAAD,CAFW;AAAA,MAE9DO,iBAF8D;AAAA,MAE3CC,oBAF2C;;AAAA,mBAGjBR,QAAQ,CAAC,CAAD,CAHS;AAAA,MAG9DS,kBAH8D;AAAA,MAG1CC,qBAH0C;;AAAA,mBAKvBV,QAAQ,CAAC,IAAD,CALe;AAAA,MAK9DW,eAL8D;AAAA,MAK7CC,kBAL6C;;AAOrE,WAASC,OAAT,GAAkB;AACdP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA4B;AACxB,QAAMC,qBAAqB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA9B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,qBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHP,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,kBAAkB,EAAlBA,kBAHG;AAIHE,MAAAA,eAAe,EAAfA,eAJG;AAKHE,MAAAA,OAAO,EAAPA,OALG;AAMHC,MAAAA,iBAAiB,EAAjBA;AANG,KADX;AAAA,cAUMV;AAVN;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GApCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\r\nimport challanges from '../../challanges.json';\r\n\r\ninterface Challange{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallangesContextData{\r\n    level: number;\r\n    currentExperience: number;\r\n    challangeCompleted: number;\r\n    activeChallange: Challange;\r\n    levelUp: () => void;\r\n    startNewChallange: () => void;\r\n}\r\n\r\ninterface ChallangesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallangesContext = createContext({} as ChallangesContextData);\r\n\r\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challangeCompleted, setChallangeCompleted] = useState(0);\r\n\r\n    const [activeChallange, setActiveChallange] = useState(null);\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n    }\r\n\r\n    function startNewChallange(){\r\n        const ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\r\n        const challange = challanges[ramdomChallangesIndex];\r\n\r\n        setActiveChallange(challange);\r\n    }\r\n\r\n    function resetChallange(){\r\n        setActiveChallange(null);\r\n    }\r\n\r\n    return (\r\n        <ChallangesContext.Provider \r\n            value={{ \r\n                level, \r\n                currentExperience, \r\n                challangeCompleted, \r\n                activeChallange,\r\n                levelUp,\r\n                startNewChallange\r\n            }}\r\n        >\r\n            { children }\r\n        </ChallangesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}