{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samuel\\\\Desktop\\\\nlw4\\\\trilha_react\\\\moveit-next\\\\src\\\\contexts\\\\ChallangesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challanges from '../../challanges.json';\nexport const ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challangeCompleted,\n    1: setChallangeCompleted\n  } = useState(0);\n  const {\n    0: activeChallange,\n    1: setActiveChallange\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallange() {\n    const ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\n    const challange = challanges[ramdomChallangesIndex];\n    setActiveChallange(challange);\n  }\n\n  function resetChallange() {\n    setActiveChallange(null);\n  }\n\n  function completeChallange() {\n    if (!activeChallange) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallange;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challangeCompleted,\n      activeChallange,\n      levelUp,\n      startNewChallange,\n      resetChallange,\n      completeChallange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/nlw4/trilha_react/moveit-next/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challanges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challangeCompleted","setChallangeCompleted","activeChallange","setActiveChallange","experienceToNextLevel","Math","pow","levelUp","startNewChallange","ramdomChallangesIndex","floor","random","length","challange","resetChallange","completeChallange","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AACrE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,kBAAD;AAAA,OAAqBC;AAArB,MAA8CV,QAAQ,CAAC,CAAD,CAA5D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,UAAMC,qBAAqB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA9B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,qBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAG,CAACb,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB;AAEA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAGC,eAAe,IAAIb,qBAAtB,EAA4C;AACxCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AAEH;AACJ;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHR,MAAAA,KADG;AAEHE,MAAAA,iBAFG;AAGHM,MAAAA,qBAHG;AAIHJ,MAAAA,kBAJG;AAKHE,MAAAA,eALG;AAMHK,MAAAA,OANG;AAOHC,MAAAA,iBAPG;AAQHM,MAAAA,cARG;AASHC,MAAAA;AATG,KADX;AAAA,cAaMpB;AAbN;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\r\nimport challanges from '../../challanges.json';\r\n\r\ninterface Challange{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallangesContextData{\r\n    level: number;\r\n    currentExperience: number;\r\n    experienceToNextLevel: number;\r\n    challangeCompleted: number;\r\n    activeChallange: Challange;\r\n    levelUp: () => void;\r\n    startNewChallange: () => void;\r\n    resetChallange: () => void;\r\n    completeChallange: () => void; \r\n}\r\n\r\ninterface ChallangesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallangesContext = createContext({} as ChallangesContextData);\r\n\r\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challangeCompleted, setChallangeCompleted] = useState(0);\r\n\r\n    const [activeChallange, setActiveChallange] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n    }\r\n\r\n    function startNewChallange(){\r\n        const ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\r\n        const challange = challanges[ramdomChallangesIndex];\r\n\r\n        setActiveChallange(challange);\r\n    }\r\n\r\n    function resetChallange(){\r\n        setActiveChallange(null);\r\n    }\r\n\r\n    function completeChallange(){\r\n        if(!activeChallange){\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallange;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <ChallangesContext.Provider \r\n            value={{ \r\n                level, \r\n                currentExperience,\r\n                experienceToNextLevel,\r\n                challangeCompleted, \r\n                activeChallange,\r\n                levelUp,\r\n                startNewChallange,\r\n                resetChallange,\r\n                completeChallange\r\n            }}\r\n        >\r\n            { children }\r\n        </ChallangesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}