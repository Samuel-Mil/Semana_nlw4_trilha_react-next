{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samuel\\\\Desktop\\\\nlw4\\\\trilha_react\\\\moveit-next\\\\src\\\\contexts\\\\ChallangesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport challanges from '../../challanges.json';\nexport var ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challangeCompleted = _useState3[0],\n      setChallangeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallange = _useState4[0],\n      setActiveChallange = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n    alert(\"Parab\\xE9ns voc\\xEA foi para o level \".concat(level + 1));\n  }\n\n  function startNewChallange() {\n    var ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\n    var challange = challanges[ramdomChallangesIndex];\n    setActiveChallange(challange);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio! :3', {\n        body: \"Valendo \".concat(challange.amount, \"xp!\"),\n        icon: 'icons/favicon.png'\n      });\n    }\n  }\n\n  function resetChallange() {\n    setActiveChallange(null);\n  }\n\n  function completeChallange() {\n    if (!activeChallange) {\n      return;\n    }\n\n    var amount = activeChallange.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallange(null);\n    setChallangeCompleted(challangeCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      experienceToNextLevel: experienceToNextLevel,\n      challangeCompleted: challangeCompleted,\n      activeChallange: activeChallange,\n      levelUp: levelUp,\n      startNewChallange: startNewChallange,\n      resetChallange: resetChallange,\n      completeChallange: completeChallange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallangesProvider, \"YeMyQTt72weEiu5J0uyJEPll24M=\");\n\n_c = ChallangesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallangesProvider\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/nlw4/trilha_react/moveit-next/src/contexts/ChallangesContext.tsx"],"names":["createContext","useEffect","useState","challanges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challangeCompleted","setChallangeCompleted","activeChallange","setActiveChallange","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","alert","startNewChallange","ramdomChallangesIndex","floor","random","length","challange","permission","body","amount","icon","resetChallange","completeChallange","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\r\nimport challanges from '../../challanges.json';\r\n\r\ninterface Challange{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallangesContextData{\r\n    level: number;\r\n    currentExperience: number;\r\n    experienceToNextLevel: number;\r\n    challangeCompleted: number;\r\n    activeChallange: Challange;\r\n    levelUp: () => void;\r\n    startNewChallange: () => void;\r\n    resetChallange: () => void;\r\n    completeChallange: () => void; \r\n}\r\n\r\ninterface ChallangesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallangesContext = createContext({} as ChallangesContextData);\r\n\r\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challangeCompleted, setChallangeCompleted] = useState(0);\r\n\r\n    const [activeChallange, setActiveChallange] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    useEffect(()=>{\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n        alert(`Parabéns você foi para o level ${level+1}`);\r\n    }\r\n\r\n    function startNewChallange(){\r\n        const ramdomChallangesIndex = Math.floor(Math.random() * challanges.length);\r\n        const challange = challanges[ramdomChallangesIndex];\r\n\r\n        setActiveChallange(challange);\r\n\r\n        if(Notification.permission === 'granted'){\r\n            new Notification('Novo desafio! :3',{\r\n                body: `Valendo ${challange.amount}xp!`,\r\n                icon: 'icons/favicon.png'\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallange(){\r\n        setActiveChallange(null);\r\n    }\r\n\r\n    function completeChallange(){\r\n        if(!activeChallange){\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallange;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();   \r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallange(null);\r\n        setChallangeCompleted(challangeCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        <ChallangesContext.Provider \r\n            value={{ \r\n                level, \r\n                currentExperience,\r\n                experienceToNextLevel,\r\n                challangeCompleted, \r\n                activeChallange,\r\n                levelUp,\r\n                startNewChallange,\r\n                resetChallange,\r\n                completeChallange\r\n            }}\r\n        >\r\n            { children }\r\n        </ChallangesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}